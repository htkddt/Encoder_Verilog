module Encoder_x4 (clk, encA, encB, rst, mode, D);
input clk, encA, encB, rst;
input [2:0] mode;
output reg x4;
output reg [15:0] D=16'h8000;
reg pre_encA, pre_encB;
always @(posedge clk or posedge rst)
begin
pre_encA <= encA;
pre_encB <= encB;
if(rst)
	D <= 16'h8000;
else if (mode == 1)
	begin
		if({pre_encA, encA, encB} == 3'b010)
			D = D + 1;
		else if({pre_encA, encA, encB} == 3'b011)
			D = D - 1;
	end
else if (mode == 2)
	begin
		if({pre_encA, encA, encB} == 3'b010)
			D = D + 1;
		else if({pre_encA, encA, encB} == 3'b011)
			D = D - 1;
		else if({pre_encA, encA, encB} == 3'b100)
			D = D - 1;
		else if({pre_encA, encA, encB} == 3'b101)
			D = D + 1;
	end
else if (mode == 4)
	begin
		if({pre_encA, encA, encB} == 3'b010)
			D = D + 1;
		else if({pre_encA, encA, encB} == 3'b011)
			D = D - 1;
		else if({pre_encA, encA, encB} == 3'b100)
			D = D - 1;
		else if({pre_encA, encA, encB} == 3'b101)
			D = D + 1;
		else if({pre_encB, encB, encA} == 3'b010)
			D = D - 1;
		else if({pre_encB, encB, encA} == 3'b011)
			D = D + 1;
		else if({pre_encB, encB, encA} == 3'b100)
			D = D + 1;
		else if({pre_encB, encB, encA} == 3'b101)
			D = D - 1;
	end
end
endmodule
	